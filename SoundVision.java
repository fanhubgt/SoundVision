/* autogenerated by Processing revision 1281 on 2025-03-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.video.*;
import java.util.Arrays;
import java.io.*;
import beads.*;
import java.net.URL;
import java.awt.*;
import processing.core.PApplet;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.AWTException;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import processing.opengl.*;
import ddf.minim.*;
import ddf.minim.ugens.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SoundVision extends PApplet {























Robot r;
int wr = 250;
int hr = 300, beatCount=1;
BufferedImage scimage;
ArrayList<BufferedImage> buffImages=new ArrayList<BufferedImage>();
PImage beatImg;
File filename;
int rindex=0;
int[][] beats={{}};
int dragX=0, dragY=0;
Movie movie;
boolean titleOnly=true, actionTypescreen=false, titleScreen=false, startScreen=false, beatScreen=false;
boolean storyScreen=false, rulesScreen=false, aboutScreen=false, menuScreen=false, settingScreen=false;
PImage titleonly, title, titleAnim;
PImage backImages[]=new PImage[3], backImage, creatureImg, screenImage, startImage;
String gameTitle="   SOUNDVISION   ";
int textSize=40;
CButton titleBtn, charBtn, charBtn1, charBtn2, charBtn3, selectedActBtn, oneBtn, twoBtn, lastBtn;
CButton allButtons[]=new CButton[20];
String catbtn[] = { "catbtn1.jpg", "catbtn2.jpg", "catbtn3.jpg"};
PImage circleanim[]=new PImage[5];
PImage scoreBack, titleBar, puzzleScr, gameButtons, gameTextButtons, scoreBacks[]=new PImage[2];
int animDelay=30, cloop=0;
boolean reverseAnim=false;
int simColors[]={0xFF99C1DE, 0xFF89C3DE, 0xFFDEDDDE, 0xFFFED1DE, 0xFFD2F1FE, 0xFF89C9DD, 0xFF82B1BE, 0xFFBBC1DE, 0xFFCCC1DE, 0xFFDDC13E, 0xFFFFC1DE, 0xFFEE2CFE};
int simCount=0;
PImage actionTypes[]=new PImage[5];
PImage overactionTypes[]=new PImage[3];
PImage loadImage=new PImage(), playIam;
int player=0;
int progressBar=105;
Timer playTimer;
CButton startBtn, storyBtn, rulesBtn, aboutBtn;
PImage cat2;
AudioContext ac;
SamplePlayer soundPlayer;
boolean isPlay=false;
PImage storyBack, startBack, rulesBack, aboutBack, arrowBack;
PImage foroneImg, fortwoImg, forlastImg, mouseImg, mouses[]=new PImage[3];
PImage btnimgs1[]=new PImage[3];
PImage btnimgs2[]=new PImage[3];
PImage btnimgs3[]=new PImage[3];
CButton closeBtn;
Timer sndTimer;
int animloop=0, cutMode=3;
int currentBoard=0;
String board[];
String aboutText = "This application is a product of Softgenes Technologies incorporated \nas SGT App Inc for short." +
  "SoundVision is a trademark of SGT GH.\n Copying and distributing is licensed to the stores only not for\n any individual, company" +
  " for share interest or profit without the\n prior knowledge of the business.\n\n\nSGT App GH                   (c) 2022, SoundVision-Beat:Pinao:Drum";

String rulesText = "";

PImage rewards[]=new PImage[4];
int playercnt=0;
String folktale[]=new String[37];
int playTexts[][]=new int[37][4];
Movie m;
String takeAction[]=new String[37];
int playTimes[]={60000, 40000, 30000, 20000, 10000, 5000};
int conrest[]={1, 2, 3, 4, 5, 6};
int score=0;
int second=1000;
int playTime=2, contest=0;
int reward=0;
int wrong=0;

CButton settingBtn, playtimeBtn, quizzsizeBtn, loadFileBtn, loadSoundBtn, recBeatBtn, saveBeatBtn, colorModeBtn, colorBtn, loadBeatBtn, materialBtn;
String rgbModel[]={"Red", "Green", "Blue"};
int colormode=0, rmodel=100, gmodel=122, bmodel=12;
String cardinalType[]={"Horizon", "Vertican", "Cardinal", "Crossinal", "Trueanagylph", "Default", "Cut"};
int cardinalMode=5;
String material[]={"Ambience", "Emission", "Specular"};
int materialMode=2;

String charText="Selext \nAction \n from Application \nMenu";
boolean fullScreen=false;
PImage creatures[]=new PImage[4];
int taleStart=0;
int taleEnd=0;
String comica;
int contestIndex[][] = {{3, 6, 10, 5, 4, 9}, {1, 0, 5, 8, 11, 12}, {0, 1, 3, 4, 7, 9}, {9, 7, 5, 3, 0, 1}, {0, 1, 2, 4, 5, 0}, {0, 0, 0, 0, 0, 0}};
CButton drumBtn, beatBtn, pianoBtn, guitarBtn;
int gemNum1, gemNum2, gemNum3, gemNum4;
int scoreBoard[] = {5, 5, 5, 10, 10, 5, 10, 20, 15, 20, 15, 10, 10, 20, 15, 5, 10, 20, 15, 10, 5, 5, 10, 15, 10};
String taleText = "Sound Machine is here.", playtonTxt1 = "(G) Drum", playtonTxt2 = "(K) Beat", playtonTxt3 = "(J) Guitar", playtonTxt4 = "(D) Piano";
int answerBoard[] = {2, 5, 6, 1, 6, 8, 10, 20, 11, 3, 9, 12, 15, 18, 19, 7, 0, 17, 13, 14, 16, 24, 23, 21};
int taleState = 0, quisim = 0, quisimSize = 5;
boolean quisimbool = false;
//Timer playTimer;
int rnge[][] = {{0, 3, 4, 5}, {4, 5, 1, 6}, {5, 3, 8, 2}, {8, 9, 21, 3}, {12, 11, 20, 4}, {13, 22, 5, 10}, {15, 6, 7, 10},
  {7, 9, 11, 20}, {10, 11, 8, 17}, {11, 9, 10, 12}, {18, 19, 10, 11}, {12, 18, 10, 11}, {13, 12, 11, 10}, {13, 14, 15, 16}, {14, 15, 16, 17},
  {15, 16, 19, 20}, {19, 11, 16, 22}, {17, 19, 18, 23}, {18, 19, 22, 24}, {12, 19, 20, 21}, {19, 20, 21, 22}, {22, 20, 21, 12}, {23, 22, 21, 20}, {0, 23, 21, 24},
  {24, 0, 1, 12}, {23, 7, 25, 12}, {26, 23, 21, 20}, {7, 9, 12, 27}, {23, 20, 22, 28}, {10, 11, 20, 29}, {27, 28, 11, 30}, {30, 21, 18, 31}, {32, 19, 17, 15}, {30, 35, 33, 28}, {34, 33, 18, 25}, {23, 26, 29, 35}, {33, 31, 30, 36}};
char playKey;
Timer comicTimer;
int index=37, comind=1;
String msg = "Action is selected:", instrs;
int stind=1;
boolean showComic=false;

String soundPath=null;
float x, y, cw, ch;
boolean cut=false, drum=true, guitar=false, piano=false, beat=false;
boolean bsave=false;
SoundMachine machine;


 public void beatPlay() {

  x=random(0, width);
  y=random(40, height);
  cw=(mouseX+dragX)/2;
  ch=(mouseY+dragY)/2;
  checkAction();

  textSize(16);
}


 public void deterAction(int code) {
  if (code==1) { //drum
    drum=true;
    beat=false;
    guitar=false;
    piano=false;
    cut=false;
  } else if (code==2) { // beat
    drum=false;
    beat=true;
    guitar=false;
    piano=false;
    bsave=true;
    cut=false;
  } else if (code==3) { // piano
    drum=false;
    beat=false;
    guitar=false;
    piano=true;
    cut=false;
  } else if (code==4) { //guitar
    drum=false;
    beat=false;
    guitar=true;
    piano=false;
    cut=false;
  } else if (code==5) {
    drum=false;
    beat=false;
    guitar=false;
    piano=false;
    cut=true;
  }
}

 public void checkAction() {
  if (drumBtn.ispressed() || playKey == 'D' || playKey == 'd') {
    deterAction(1);
    drumBtn.pressed = false;
  } else if (beatBtn.ispressed() || playKey == 'G' || playKey == 'g') {
    deterAction(2);
    beatBtn.pressed = false;
  } else if (pianoBtn.ispressed() || playKey == 'J' || playKey == 'j') {
    deterAction(3);
    pianoBtn.pressed = false;
  } else if (guitarBtn.ispressed() || playKey == 'K' || playKey == 'k') {
    deterAction(4);
    guitarBtn.pressed = false;
  } else if (loadBeatBtn.ispressed() ) {
    deterAction(5);
    loadBeatBtn.pressed = false;
  }
  playKey='0';
}

public void setWorkingDir(File imgLoc) {
  filename=imgLoc;
}

String path;
public void screenCapture(int x, int y, int width, int height) {
  try {
    scimage = r.createScreenCapture(new Rectangle(x, y, width, height));
    buffImages.add(scimage);
    println("Capture Screen Size:"+buffImages.size());
    if (bsave) {
      ImageIO.write(scimage, "png", new File(path+"/beat"+frameCount+".png"));
    }
  }
  catch (Exception ex) {
  }
}

 public void drawbeatScreen() {
  if (!fullScreen) {
    // fullScreen();
    surface.setSize(displayWidth, displayHeight);

    int  p[]={width/2, height/2};
    int  p1[]={width, height};
    surface.placeWindow(p, p1);
    surface.setResizable(true);
    fullScreen=true;

    playTimer =new Timer("beatRendMan", true);

    sndTimer=new Timer("beatRenManSnd", true);
    sndTimer.schedule(new TimerTask() {
      public void run() {
        if (soundPath!=null)
        playSoundPath(soundPath);
        else
          playSound("sound7.wav");
      }
    }
    , 0, 2*playTimes[playTime]);
    quisimbool=true;
  }

  titleBar.resize(width, titleBar.height);
  PImage playerImg=actionTypes[player];
  image(playerImg, 0, 0, 90, 90);
  image(titleBar, 0, 0, 5, 5);
  //// if (drum) {
  //noFill();
  noTint();
  pushStyle();
  machine.drawDrums();
  popStyle();
  // } else if (beat) {
  // } else if (piano) {
  // }
  //  if (!beat) {

  tint(190);
  fill(0xFFBCEDAC);
  textSize(60);
  text("SOUNDVISION:"+mouseX+","+mouseY, 20, height-40);

  textSize(16);


  noTint();

  pianoBtn.draw();
  beatBtn.draw();
  drumBtn.draw();
  guitarBtn.draw();
  loadFileBtn.draw();
  loadSoundBtn.draw();
  loadBeatBtn.draw();
  saveBeatBtn.draw();

  if (loadFileBtn.ispressed()) {
    selectInput("Select an image to render or beat or animate", "fileSelected");
    loadFileBtn.pressed=false;
  } else if(beatBtn.ispressed()){
    key='D';
    keyPressed();
    beatBtn.pressed=false;
  }else if (loadSoundBtn.ispressed()) {
    selectInput("Select a sound file.", "soundSelected");
    loadSoundBtn.pressed=false;
  } else if (loadBeatBtn.ispressed()) {
    selectInput("Select a sound beat file[svb].", "soundRecSelected");
    
    loadBeatBtn.pressed=false;
  } else if (recBeatBtn.ispressed()) {
     machine.setMixBeatPath(path);
    if(machine.isRecordSet())
     machine.setRecordFlag(false);
     else
      machine.setRecordFlag(true);
    recBeatBtn.pressed=false;
  } else if (materialBtn.ispressed()) {
    materialMode++;
    if (materialMode > 2) materialMode=0;
    materialBtn=new CButton(31, 342, true, "Set "+material[materialMode]);
    materialBtn.setTextPos(100, 342);
    materialBtn.setSize(60);
    materialBtn.pressed=false;
  } else if (colorModeBtn.ispressed()) {
    try {
      colormode++;
      if (colormode > 2) colormode=0;
      String numstr = JOptionPane.showInputDialog(null, "Set value of the red model[0-255]", "Color Mode(RGB)");
      int valueOf = Integer.valueOf(numstr.trim());
      rmodel=valueOf;
      numstr = JOptionPane.showInputDialog(null, "Set value of the green model[0-255]", "Color Mode(RGB)");
      valueOf = Integer.valueOf(numstr.trim());
      gmodel=valueOf;
      numstr = JOptionPane.showInputDialog(null, "Set value of the blue model[0-255]", "Color Mode(RGB)");
      valueOf = Integer.valueOf(numstr.trim());
      bmodel=valueOf;
      if (colormode==0)
        machine.setColor1(color(rmodel, gmodel, bmodel));
      if (colormode==1)
        machine.setColor2(color(rmodel, gmodel, bmodel));
      colorModeBtn.pressed=false;
    }
    catch(Exception e) {
    }
  } else if (colorBtn.ispressed()) {
    if (materialMode==0)
    {

      JOptionPane.showMessageDialog(null, "Ambient color is set["+rmodel+","+gmodel+","+bmodel+"]");
    } else if (materialMode==1)
    {

      JOptionPane.showMessageDialog(null, "Emiisive color is set["+rmodel+","+gmodel+","+bmodel+"]");
    } else if (materialMode==2)
    {

      JOptionPane.showMessageDialog(null, "Specular color is set["+rmodel+","+gmodel+","+bmodel+"]");
    }
    colorBtn.pressed=false;
  } else if (saveBeatBtn.ispressed()) {
    key='B';
    keyPressed();
    key='~';
    saveBeatBtn.pressed=false;
  }
  beatPlay();

  materialBtn.draw();
  colorBtn.draw();
  colorModeBtn.draw();
  recBeatBtn.draw();
}


 public void soundSelected(File sndFile) {
  if (sndFile.exists()) {
    try {
      soundPath=sndFile.getAbsolutePath();
      String type=soundPath.substring(soundPath.lastIndexOf("."), soundPath.length());
      if (type.contains("wav") || type.contains("mp3") || type.contains("au") )
      {
      } else {
        soundPath=null;
        JOptionPane.showMessageDialog(null, "Set a wav, mp3 or au sound file.");
      }
    }
    catch(Exception e) {
    }
  }
}

String soundRec="";
 public void soundRecSelected(File sndFile) {
  if (sndFile.exists()) {
    try {
      soundRec=sndFile.getAbsolutePath();
      String type=soundRec.substring(soundRec.lastIndexOf("."), soundRec.length());
      if (type.contains("svb") )
      {
        machine.loadSound(soundRec);
      } else {
        soundPath=null;
        JOptionPane.showMessageDialog(null, "Set a .svb sound file.");
      }
    }
    catch(Exception e) {
    }
  }
}


 public void  drawActionButtons() {
  beatBtn=new CButton(1192, 285, true, "(D) Beat");
  beatBtn.setTextPos(1282, 209);
  
  drumBtn=new CButton(1192, 460, true, "(G) Drum");
  drumBtn.setTextPos(1282, 445);
  
  pianoBtn=new CButton(1192, 649, true, "(J) Pian0");
  pianoBtn.setTextPos(1282, 634);
  
  guitarBtn=new CButton(1192, 826, true, "(K) Guitar");
  guitarBtn.setTextPos(1282, 804);
}

 public void setup() {
  /* size commented out by preprocessor */;
  surface.setLocation(width/2-800/2, height/2-600/2);
  surface.setSize(800, 600);

  surface.setResizable(true);

  /* smooth commented out by preprocessor */;
  //noStroke();
  drawActionButtons();
  textFont(createFont("sans.ttf", textSize));
  instrs=" Play \nKey           D\nKey           F\nKey           J\nKey           K";
  machine=new SoundMachine(this);
  ac = AudioContext.getDefaultContext();
  try {
    r = new Robot();
  }
  catch(AWTException ee) {
  }

  loadFileBtn=new CButton(31, 132, true, "Load File");
  loadFileBtn.setTextPos(100, 132);
  loadFileBtn.setSize(60);

  loadSoundBtn=new CButton(31, 202, true, "Load Sound");
  loadSoundBtn.setTextPos(100, 202);
  loadSoundBtn.setSize(60);

  recBeatBtn=new CButton(31, 272, true, "Record");
  recBeatBtn.setTextPos(100, 272);
  recBeatBtn.setSize(60);

  materialBtn=new CButton(31, 342, true, "Set Material");
  materialBtn.setTextPos(100, 342);
  materialBtn.setSize(60);

  colorBtn=new CButton(31, 412, true, "Set Color");
  colorBtn.setTextPos(100, 412);
  colorBtn.setSize(60);

  colorModeBtn=new CButton(31, 482, true, "Color Mode(RGB)");
  colorModeBtn.setTextPos(100, 482);
  colorModeBtn.setSize(60);

  loadBeatBtn=new CButton(272, 41, true, "Load Beat");
  loadBeatBtn.setTextPos(272, 99);
  loadBeatBtn.setSize(60);

  saveBeatBtn=new CButton(372, 41, true, "Save Beat");
  saveBeatBtn.setTextPos(372, 99);
  saveBeatBtn.setSize(60);

  //backgrounds at start screen
  storyBack=loadImage("story.jpg");
  arrowBack=loadImage("arrowbox.jpg");
  titleAnim=loadImage("titleanim.jpg");

  int arrwidth=(width/2-titleAnim.width/2)+100;

  settingBtn=new CButton(696, 441, true, "Settings");
  playtimeBtn=new CButton(200, 280, true, "Play \nTime");
  quizzsizeBtn=new CButton(390, 280, true, "Frame \nCount");


  oneBtn=new CButton(arrwidth-100, 555, false, " >    Next ");
  oneBtn.setSize(60);
  twoBtn=new CButton(arrwidth+40, 555, false, "<    Previous");
  twoBtn.setSize(60);
  lastBtn=new CButton(arrwidth+180, 555, false, "     >>   Comic ");
  lastBtn.setSize(60);
  closeBtn=new CButton(694, 103, true, "X");
  closeBtn.setSize(60);

  titleonly=loadImage("title1.jpg");
  title=loadImage("title.png");
  titleAnim=loadImage("titleanim.jpg");
  startImage=loadImage("start.jpg");
  titleBar=loadImage("titlebar.jpg");


  titleBtn=new CButton(width-140, height-70, true, "Press");
  allButtons[0]=titleBtn;
  for (int c=0; c<5; c++) {
    circleanim[c]=loadImage("ciranim-"+(c+1)+".jpg");
  }
  charBtn=new CButton(width-140, height-60, true, "");
  charBtn.setSize(80);
  charBtn.setTextPos(543, 432);
  allButtons[1]=charBtn;

  charBtn1=new CButton(238, 44, true, "\n\n");
  charBtn1.setSize(80);
  allButtons[2]=charBtn1;

  charBtn2=new CButton(634, 44, true, "\n\\n");
  charBtn2.setSize(80);
  allButtons[3]=charBtn2;

  charBtn3=new CButton(238, 538, true, "");
  charBtn3.setSize(80);
  charBtn3.setTextPos(147, 432);
  allButtons[4]=charBtn3;

  selectedActBtn=new CButton(425, height/2, true, " Selected     \n   "+(player+1));
  selectedActBtn.setSize(120);
  allButtons[5]=selectedActBtn;

  startBtn=new CButton(278, 192, false, "Start (Key M)");
  startBtn.setSize(60);
  startBtn.setTextPos(360, 200);
  allButtons[6]=startBtn;

  storyBtn=new CButton(278, 255, false, "Story (Key S)");
  storyBtn.setSize(60);
  storyBtn.setTextPos(360, 270);
  allButtons[7]=storyBtn;

  rulesBtn=new CButton(278, 312, false, "Rules (Key R)");
  rulesBtn.setSize(60);
  rulesBtn.setTextPos(360, 328);
  allButtons[8]=rulesBtn;

  aboutBtn=new CButton(278, 376, false, "About (Key A)");
  aboutBtn.setSize(60);
  aboutBtn.setTextPos(360, 390);
  allButtons[9]=aboutBtn;


  loadImage=loadImage("piano.png");
  actionTypes[0]=loadImage;
  loadImage=loadImage("drum.png");
  actionTypes[1]=loadImage;
  loadImage=loadImage("guitar.png");
  actionTypes[2]=loadImage;
  actionTypes[3]=loadImage("beat.png");

  playSound("sound7.wav");
  drawTitleOnly();

  frameRate(3);
}

 public void drawTitleOnly() {
  fill(simColors[simCount]);
  //image(backImage, 0, 0, width, height);
  image(titleonly, 0, height/2+20, width, 190);
  tint(0xFFE3A037, 40);
  image(circleanim[cloop], 260, 272, 90, 50);
  image(circleanim[cloop], 459, 265, 90, 50);
  PImage baakImg=loadImage("baak.png");
  image(baakImg, 0, 0, width, height);
  noTint();
  text(""+gameTitle, 277, 409, 80);
  text("SOUNDVISION \nBEATS \nDRUM \nPIANO.", 22, 359, 80);

  if (titleBtn.ispressed()) {
    titleOnly=false;
    titleScreen=true;
    titleBtn.pressed=false;
  }
}

 public void circleanimation() {
  tint(0xFF82C1DE, 50);
  image(circleanim[cloop], 515, 250, 180, 160);
  image(circleanim[cloop], 607, 471, 130, 130);
  image(circleanim[cloop], 515, 46, 180, 160);
  delay(animDelay);
  noTint();
}


 public void mousePressed() {

  titleBtn.mousePressed();
  charBtn.mousePressed();
  charBtn1.mousePressed();
  charBtn2.mousePressed();
  charBtn3.mousePressed();
  startBtn.mousePressed();
  selectedActBtn.mousePressed();
  storyBtn.mousePressed();
  rulesBtn.mousePressed();
  aboutBtn.mousePressed();
  oneBtn.mousePressed();
  twoBtn.mousePressed();
  lastBtn.mousePressed();
  closeBtn.mousePressed();
  settingBtn.mousePressed();
  playtimeBtn.mousePressed();
  quizzsizeBtn.mousePressed();
  drumBtn.mousePressed();
  beatBtn.mousePressed();
  pianoBtn.mousePressed();
  guitarBtn.mousePressed();
  saveBeatBtn.mousePressed();
  materialBtn.mousePressed();
  colorBtn.mousePressed();
  colorModeBtn.mousePressed();
  loadFileBtn.mousePressed();
  loadSoundBtn.mousePressed();
  recBeatBtn.mousePressed();
  loadBeatBtn.mousePressed();
  playSound("beatbox.mp3");
  machine.drumHit();
}

 public void drawTitleScreen() {
  image(title, 0, 0, width/2, height);
  image(titleAnim, width/2, 0, width/2, height-150);
  tint(190);
  playIam=actionTypes[3];
  playIam.resize(90, 90);
  image(playIam, 192, 138);
  textFont(createFont("Roboto-Medium.ttf", textSize));
  actionTypes[1].resize(90, 90);
  image(actionTypes[1], 192, 390);
  fill(0xFF82C1DE);
  textSize(30);
  text("BEAT", 22, 167);
  text("DRUM", 22, 413);
  textSize(25);
  text("SGT App Inc.", 22, 554 );
  text("(c) 2022.", 249, 554 );
  textSize(20);
  fill(0xFFBCEDAC);
  text("This is an application for making beat \nfor drum, piano and guitar player which \nyou will pick from screen." +
    "These picks \nare based " + "on mouse behaviour on \nselecting.", 435, 41, 80);
  circleanimation();
  if (titleBtn.ispressed()) {
    titleScreen=false;
    actionTypescreen=true;
    titleBtn.pressed=false;
  }
}

 public void drawActionTypeScreen() {
  image(title, 0, 0, width/2, height);
  image(title, width/2, 0, width/2, height);
  textSize(30);

  text(charText, 5, height/2-70);
  tint(190, 220);
  image(actionTypes[0], 198, 143, 90, 90);
  image(actionTypes[1], 598, 143, 90, 90);
  image(actionTypes[2], 198, 382, 90, 90);
  image(actionTypes[3], 601, 382, 90, 90);
  noTint();
  fill(23, 67, 189, 190);
  if (charBtn.ispressed()) {
    player=3;
    deterAction(4);
    charBtn.pressed=false;
  } else if (charBtn1.ispressed()) {
    player=0;
    charBtn1.pressed=false;
    deterAction(1);
  } else if (charBtn2.ispressed()) {
    player=1;
    charBtn2.pressed=false;
    deterAction(2);
  } else if (charBtn3.ispressed()) {
    player=2;
    charBtn3.pressed=false;
    deterAction(3);
  }
  if (selectedActBtn.ispressed()) {
    startScreen=true;
    selectedActBtn.pressed=false;
  }
}


 public void keyPressed() {
  if (key == CODED) {
    if (keyCode == ESC) {
      exit();
    }
  } else if (key == 'M' || key =='m' ) {
    setScreensOff();
    setStoryScreensOff();
    beatScreen=false;
    menuScreen=true;
    fullScreen=false;
    unpressButtons();
    noFullScreen();
  } else if (key == 'S' || key =='s' ) {
    setScreensOff();
    setStoryScreensOff();
    beatScreen=false;
    storyScreen=true;
    fullScreen=false;
    unpressButtons();
    noFullScreen();
  } else if (key == 'R' || key =='r' ) {
    setScreensOff();
    setStoryScreensOff();
    beatScreen=false;
    rulesScreen=true;
    fullScreen=false;
    unpressButtons();
    noFullScreen();
  } else if (key == 'A' || key =='a' ) {
    setScreensOff();
    setStoryScreensOff();
    beatScreen=false;
    aboutScreen=true;
    fullScreen=false;
    unpressButtons();
    noFullScreen();
  } else if (key=='P' || key=='p') {
    quisim = 0;
    taleState += 1;
    quisimbool = true;
    msg = "Grab potion soup in pot to creature.";
  } else if (key=='C' || key=='c') {
    msg = "Grab potion soup in pot.";
    contest += 1;
  } else if(key == 'd' || key=='D'){
    String location="beat/beatsam"+beatCount+".svb"; 
    machine.loadSound(location);
    beatCount++;
    if(beatCount>27) beatCount=1;
    beatBtn.setTextPos(1282, 209);
    beatBtn.setText("(D) Beat["+beatCount+"]");
    JOptionPane.showMessageDialog(null, "Beat "+beatCount+" is loaded into vision.\n");
  }else if (key =='k' || key =='K' || key =='G' ||key =='g'||key =='J'||key =='j') {
    playKey=key;
  } else if (key=='B' || key=='b')
  {
    bsave=true;
    screenCapture(255, 246, 867, 218);
    bsave=false;
    machine.saveSound(path);
    JOptionPane.showMessageDialog(null, "Beat image and sound file are saved.\n"+path);
  }

  machine.keyDrums();
  playSound("beatbox.mp3");
}

 public void noFullScreen() {
  //fullScreen();
  surface.setSize(800, 600);
  surface.setLocation(width/2-800/2, height/2-600/2);
  surface.setResizable(true);
}

 public void playSound(String sound) {

  try
  {
    //production

    String os=System.getProperty("os.name");
    String doc="";
    if (os.startsWith("Mac") || os.equalsIgnoreCase("Linux"))
    {
      doc= "/Users/"+System.getProperty("user.name")+"/Documents/SoundVision/data/beatbox.mp3";
      File soundCheck=new File(doc);
      if (soundCheck.exists())
      {
        doc="/Users/"+System.getProperty("user.name")+"/Documents/SoundVision/data/";
      } else
      {
        doc= "/Applications/SoundVision/data/beatbot.mp3";
        soundCheck=new File(doc);
        if (soundCheck.exists())
        {
          doc="/Users/Applications/SoundVision/data/";
        } else
          doc=null;
      }
    }

    // print("CD directory:::"+doc);
    File str;

    if (doc==null) {
      str=new File(new String("/Users/frankappiah/Documents/Processing/SoundVision/data")+"/"+sound);
    } else {
      str=new File(new String(doc+sound));
    }
    soundPlayer = new SamplePlayer(SampleManager.sample(str.getAbsolutePath()));
    soundPlayer.setToLoopStart();
    //soundPlayer.setLoopType(SamplePlayer.LOOP_ALTERNATING);
    beads.Gain g = new beads.Gain(2, 0.2f);
    g.addInput(soundPlayer);
    ac.out.addInput(g);

    ac.start();
  }
  catch(Exception io) {
    print("Err:"+io.toString());
  }
}

 public void playSoundPath(String soundpath) {

  try
  {
    soundPlayer = new SamplePlayer(SampleManager.sample(soundpath));
    soundPlayer.setToLoopStart();
    //soundPlayer.setLoopType(SamplePlayer.LOOP_ALTERNATING);
    beads.Gain g = new  beads.Gain(2, 0.2f);
    g.addInput(soundPlayer);
    ac.out.addInput(g);

    ac.start();
  }
  catch(Exception io) {
    print("Err:"+io.toString());
  }
}


 public void restart() {
  try {
    soundPlayer.start();
  }
  catch(Exception e) {
  }
}

 public void stopSound() {
  try {
    ac.stop();
  }
  catch(Exception e) {
  }
}

 public void drawStartScreen() {
  tint(111, 200);
  PImage rendImg=loadImage("baak.png");
  rendImg.resize(width, height);
  background(rendImg);
  noTint();
  rect(105, height/2, width-240, 50, 3);
  rect(progressBar, height/2-6, 30, 60);
  int proloc=width-180;
  if (progressBar < proloc)
  {
    progressBar+=80;
    text("Loading", width/3, height/2+38);
    text(".", progressBar, height/2+30);
  } else if (!beatScreen) {
    selectInput("Select an image to render or beat or animate", "fileSelected");
    progressBar=width-170;
    text("Application Started", width/3, height/2+38);
    delay(400);
    clear();
    setScreensOff();
    menuScreen=true;
    startScreen=false;
  }
}


 public void drawMenuScreen() {
  charText="";
  PImage rendImg=loadImage("baak.png");
  rendImg.resize(width, height);
  background(rendImg);
  if (fullScreen)
    image(startImage, width/2-startImage.width/2, height/2-startImage.height/2);
  else
    image(startImage, width/2-startImage.width/2, height/2-startImage.height/2);
  textSize(18);

  actionTypes[player].resize(28, 28);
  image(actionTypes[player], 490, 190);
  image(actionTypes[player], 490, 253);
  image(actionTypes[player], 490, 310);
  image(actionTypes[player], 490, 374);
  //anim
  tint(65, 55);
  image(circleanim[cloop], 102, 55, 180, 160);
  image(circleanim[cloop], 520, 392, 180, 160);

  noTint();
  if (startBtn.ispressed()) { //startup problem
    setScreensOff();
    setStoryScreensOff();
    beatScreen=true;
    actionTypescreen=false;
    startBtn.pressed=false;
    menuScreen=false;
    unpressButtons();
  } else if (storyBtn.ispressed()) {
    setScreensOff();
    setStoryScreensOff();
    storyBtn.pressed=false;
    lastBtn.pressed=false;
    storyScreen=true;
    showComic=false;
    unpressButtons();
    setScreensOff();
  } else if (rulesBtn.ispressed()) {
    setScreensOff();
    setStoryScreensOff();
    rulesBtn.pressed=false;
    rulesScreen=true;
    unpressButtons();
  } else if (aboutBtn.ispressed()) {
    setStoryScreensOff();
    setScreensOff();
    aboutBtn.pressed=false;
    aboutScreen=true;
    unpressButtons();
  }
  startBtn.draw();
  storyBtn.draw();
  rulesBtn.draw();
  aboutBtn.draw();
}

 public void setStoryScreensOff() {
  storyScreen=false;
  beatScreen=false;
  rulesScreen=false;
  aboutScreen=false;
  settingScreen=false;
  rulesScreen=false;
}

 public void setScreensOff() {
  startScreen=false;
  titleScreen=false;
  titleOnly=false;
  actionTypescreen=false;
}

 public void draw() {
  clear();
  //background(77,111);
  fill(120, 30);
  textSize(textSize);
  if (simCount>11) simCount=0;
  if (cloop>4)cloop=0;

  if (titleOnly) {
    drawTitleOnly();
    titleBtn.draw();
    if (!isPlay) {
      playSound("sound11.wav");
      isPlay=true;
    }
  } else if (titleScreen) {
    tint(122, 220);
    drawTitleScreen();
    textSize(30);
    titleBtn.setText("Start\nApp");
    titleBtn.draw();
    playSound("sound11.wav");
  } else if (startScreen)
  {
    drawStartScreen();
    startBtn.pressed=false;
    showComic=false;
  } else if (actionTypescreen) {
    drawActionTypeScreen();
    charBtn.draw();
    charBtn1.draw();
    charBtn2.draw();
    charBtn3.draw();
    selectedActBtn.setText(" Selected     \n   "+(player+1));
    selectedActBtn.draw();
  } else if (storyScreen) {
    showComic=false;
    drawStoryScreen();
    closeBtn.pressed=false;
  } else if (rulesScreen) {
    if (settingBtn.ispressed()) {
      setScreensOff();
      setStoryScreensOff();
      unpressButtons();
      settingScreen=true;
      rulesScreen=false;
      menuScreen=false;
    }
    drawRulesScreen();
    closeBtn.pressed=false;
  } else if (aboutScreen) {
    drawAboutScreen();
    closeBtn.pressed=false;
  } else if (menuScreen) {
    showComic=false;
    drawMenuScreen();
    startBtn.pressed=false;
    closeBtn.pressed=false;
  } else if (beatScreen) {
    drawbeatScreen();
  } else if (settingScreen) {
    drawSettingScreen();
  } else if (showComic) {
    drawComicScreen();
    startScreen=false;
    storyScreen=false;
    startBtn.pressed=false;
    closeBtn.pressed=false;
  }
  //ambient(2);
  hue(22);

  simCount+=1;
  if (reverseAnim)
    cloop-=1;
  else
    cloop+=1;
}

 public void drawSettingScreen() {
  drawTextGround();

  playtimeBtn.draw();
  quizzsizeBtn.draw();
  if (playtimeBtn.ispressed()) {
    playTime+=1;
    playtimeBtn.pressed=false;
    if (playTime >5) playTime=0;
    if (contest > 4) contest=0;
    if (playTimer!=null)
      playTimer.purge();

    playTimer =new Timer("beatRendMan", true);

    playTimer.schedule(new TimerTask() {
      public void run() {
        beatPlay();
      }
    }
    , 0, playTimes[playTime]);
  } else if (quizzsizeBtn.ispressed()) {
    quizzsizeBtn.pressed=false;
    contest++;
    if (contest > 4) contest=0;
  }


  textSize(24);
  text("Settings [Press Button to Change] \n(Play Time || Frame Level)", 120, 105);
  textSize(20);
  text("Play time(s)::    "+playTimes[playTime]/1000, 120, 380);
  text("Frame Rate::   "+conrest[contest], 320, 380);
  text("Note:: 6 Play Times and 5 Frame rates. \nESC Key : Quit App.", 120, 430);
}

 public void drawComicScreen() {
  tint(165, 230);
  titleAnim.resize(width-130, height-130);
  image(titleAnim, width/2-titleAnim.width/2, height/2-titleAnim.height/2);
  arrowBack.resize(width-130, 60);
  image(arrowBack, width/2-titleAnim.width/2, 535);
  image(actionTypes[player], 0, 0, 125, 125);
  noTint();
  fill(0xFF82C1DE);
  textSize(25);
  closeBtn.draw();
  oneBtn.draw();
  twoBtn.draw();
  if (oneBtn.ispressed()) {
    stind+=1;
    fill(0xFF82C1DD);
    twoBtn.pressed=false;
    closeBtn.pressed=false;
    oneBtn.pressed=false;
  } else if (twoBtn.ispressed())
  {
    fill(0xFF82C8DE);
    stind-=1;
    oneBtn.pressed=false;
    closeBtn.pressed=false;
    twoBtn.pressed=false;
  } else if (closeBtn.ispressed()) {
    menuScreen=true;
    showComic=false;
    setStoryScreensOff();
    closeBtn.pressed=false;
    unpressButtons();
  }

  if (stind>34 || stind<1) stind=1;
  //image(loadImage("botwebaako/comica"+stind+".jpg"), 102, 145, 550, 339);
}

 public void drawStoryScreen() {
  tint(165, 230);
  titleAnim.resize(width-130, height-130);
  image(titleAnim, width/2-titleAnim.width/2, height/2-titleAnim.height/2);
  arrowBack.resize(width-130, 60);
  image(arrowBack, width/2-titleAnim.width/2, 535);
  image(actionTypes[player], 0, 0, 125, 125);
  noTint();
  fill(0xFF82C1DE);
  textSize(25);

  oneBtn.draw();
  twoBtn.draw();
  lastBtn.draw();
  closeBtn.draw();
  if (oneBtn.ispressed()) {
    currentBoard +=1;
    fill(0xFF82C1DD);
    twoBtn.pressed=false;
    lastBtn.pressed=false;
    closeBtn.pressed=false;
    oneBtn.pressed=false;
  } else if (twoBtn.ispressed())
  {
    fill(0xFF82C8DE);
    currentBoard-=1;
    oneBtn.pressed=false;
    closeBtn.pressed=false;
    lastBtn.pressed=false;
    twoBtn.pressed=false;
  } else if (closeBtn.ispressed()) {
    menuScreen=true;
    showComic=false;
    setStoryScreensOff();
    setScreensOff();
    closeBtn.pressed=false;
    unpressButtons();
  } else if (lastBtn.ispressed())
  {
    showComic=true;
    menuScreen=false;
    storyScreen=false;
    setStoryScreensOff();
    setScreensOff();
    unpressButtons();
    lastBtn.pressed=false;
  }

  checkBoard();
  //text(board[currentBoard], 102, 155, 80);
}

 public void checkBoard() {

  // if (currentBoard > board.length-1 || currentBoard < 0) {
  //   currentBoard=0;
  // }
}

 public void unpressButtons() {
  startBtn.pressed=false;
  storyBtn.pressed=false;
  rulesBtn.pressed=false;
  aboutBtn.pressed=false;
  closeBtn.pressed=false;
  settingBtn.pressed=false;
}


 public void drawAboutScreen() {
  drawTextGround();
  text(aboutText, 102, 155, 80);
}

 public void drawTextGround() {
  tint(165, 230);
  titleAnim.resize(width-130, height-130);
  image(titleAnim, width/2-titleAnim.width/2, height/2-titleAnim.height/2);
  noTint();
  closeBtn.draw();
  fill(0xFF82C1DE);
  textSize(21);
  if (closeBtn.ispressed()) {
    setStoryScreensOff();
    setScreensOff();
    closeBtn.pressed=false;
    unpressButtons();
    menuScreen=true;
  }
}


 public void drawRulesScreen() {
  drawTextGround();

  textSize(20);
  text(rulesText, 102, 155, 80);
  tint(155, 199);
  //fill(23);
  textSize(15);
  noTint();
  settingBtn.draw();
  settingBtn.pressed=false;
}


 public void fileSelected(File imgFile) {

  if (imgFile.exists()) {
    try {
      beatImg=loadImage(imgFile.getAbsolutePath());
      path=imgFile.getAbsolutePath();
      path=path.substring(0, path.lastIndexOf("/"));
      File nf=new File(path+"/record");
      nf.mkdir();
      path=nf.getAbsolutePath();
      println("Path::"+nf.getAbsolutePath());
    }
    catch(Exception e) {
    }
  } else
    beatImg=loadImage("game.png");

  //  beatImg.resize(displayWidth, displayHeight);
}

 public void mouseDragged() {
  dragX=pmouseX;
  dragY=pmouseY;
  println("Dragged.....");
}


class CButton {

  int rectX=0, rectY=0;      // Position of square button
  int circleX=0, circleY=0;  // Position of circle button
  int rectSize = 140;     // Diameter of rect
  int circleSize = 140;   // Diameter of circle
  int rectColor, circleColor, baseColor;
  int rectHighlight, circleHighlight;
  int currentColor;
  boolean rectOver = false;
  boolean circleOver = false;
  PImage buttonImages[]=new PImage[3];
  PImage bImage;
  boolean circle=false, pressed=false, imgset=false;
  int alpha=155;
  String text;
  int textPox=0, textPoy=0;
  int clickCount=0;

  CButton(int posX, int posY, boolean circle) {

    if (circle) {
      this.circleX=posX;
      this.circleY=posY;
    } else
    {
      this.rectX=posX;
      this.rectY=posY;
      //print(""+rectX);
    }
    this.circle=circle;
    this.setup();
  }

  CButton(int posX, int posY, boolean circle, String text) {

    if (circle) {
      this.circleX=posX;
      this.circleY=posY;
    } else
    {
      this.rectX=posX;
      this.rectY=posY;
    }
    this.circle=circle;
    this.text=text;
    this.setup();
  }

   public String getText()
  {

    return this.text;
  }

   public void setPosition(int posX, int posY) {

    if (circle) {
      this.circleX=posX;
      this.circleY=posY;
    } else
    {
      this.rectX=posX;
      this.rectY=posY;
    }
  }

   public void setImageFlag(boolean ds) {
    this.imgset=ds;
  }
   public void setSize(int size) {

    if (circle) {
      this.circleSize=size;
    } else
    {
      this.rectSize=size;
    }
  }

   public int[] getPosition() {

    int[] pos=new int[2];
    if (circle) {
      pos[0]=this.circleX;
      pos[1]=this.circleY;
    } else
    {
      pos[0]=this.rectX;
      pos[1]=this.rectY;
    }
    return pos;
  }

   public void setTextPos(int x, int y) {
    this.textPox=x;
    this.textPoy=y;
  }

   public void loadEffects() {
    /* bImage=loadImage("selectedActBtn1.png");
     buttonImages[0]=bImage;
     bImage=loadImage("selectedActBtn2.png");
     buttonImages[1]=bImage;
     bImage=loadImage("selectedActBtn3.png");
     buttonImages[2]=bImage;
     */
    bImage=loadImage("button.png");
    buttonImages[0]=bImage;
    bImage=loadImage("button.png");
    buttonImages[1]=bImage;
    bImage=loadImage("button.png");
    buttonImages[2]=bImage;
  }


  CButton(int posX, int posY, boolean circle, PImage[] effect) {

    if (circle) {
      this.circleX=posX;
      this.circleY=posY;
    } else
    {
      this.rectX=posX;
      this.rectY=posY;
    }
    this.circle=circle;
    this.buttonImages=effect;
    this.setup();
  }

  CButton(int posX, int posY, boolean circle, String text, PImage[] effect) {

    if (circle) {
      this.circleX=posX;
      this.circleY=posY;
    } else
    {
      this.rectX=posX;
      this.rectY=posY;
    }
    this.circle=circle;
    this.buttonImages=effect;
    this.text=text;
    this.imgset=true;
    this.setup();
  }


   public void setup() {

    rectColor = color(0xFFEA6A60, alpha);
    rectHighlight = color(0xFF82C1DE, alpha);
    circleColor = color(0xFFEA6A60, alpha);
    circleHighlight = color(0xFF82C1DE, alpha);
    baseColor = color(192, alpha);
    currentColor = baseColor;
    if (this.imgset)
    {
    } else {
      loadEffects();
    }
    ellipseMode(CENTER);
  }

   public void draw() {
    update();
    //background(currentColor);
    strokeWeight(20);
    if (this.circle) {
      stroke(255);

      if (circleOver) {
        fill(circleColor);
        buttonImages[1].resize(circleSize-54, circleSize-50);
        image(buttonImages[1], circleX-40, circleY-40);
      } else {
        stroke(0);

        fill(circleHighlight);
        buttonImages[2].resize(circleSize-54, circleSize-50);
        image(buttonImages[2], circleX-40, circleY-40);
      }

      if (textPox>0 | textPoy>0)
      {
        text(""+text, textPox, textPoy);
      } else {
        text(""+text, circleX-45, circleY-15);
      }

      ellipse(circleX, circleY, circleSize, circleSize);
    } else {
      stroke(255);

      if (rectOver) {

        fill(rectColor);
        buttonImages[1].resize(rectSize-54, rectSize-50);
        image(buttonImages[1], rectX-40, rectY-40);
      } else {
        stroke(0);

        fill(rectHighlight);
        buttonImages[2].resize(rectSize-54, rectSize-50);
        image(buttonImages[2], rectX-40, rectY-40);
      }
      rect(this.rectX, this.rectY, this.rectSize/2+32, this.rectSize/2);
      fill(255);
      if (textPox>0 | textPoy>0)
        text(""+text, textPox, textPoy);
      else
        text(""+text, rectX-60, rectY-20);
      noFill();
    }
  }

   public void update() {
    if ( this.circle && overCircle(circleX, circleY, circleSize) ) {
      circleOver = true;
      rectOver = false;
    } else if (!this.circle && overRect(rectX, rectY, rectSize, rectSize) ) {
      rectOver = true;
      circleOver = false;
    } else {
      circleOver = rectOver = false;
    }
  }

   public void mousePressed() {
    if (circleOver) {
      // currentColor = circleColor;
      if (clickCount==0)
        pressed=true;
      else {
        clickCount=0;
        pressed=false;
      }
    }
    if (rectOver) {
      // currentColor = rectColor;
      if (clickCount==0)
        pressed=true;
      else {
        clickCount=0;
        pressed=false;
      }
    }
  }

   public void setText(String text) {

    this.text="\n\n\n\n"+text;
  }

   public boolean ispressed() {
    return pressed;
  }

   public boolean overRect(int x, int y, int width, int height) {
    if (mouseX >= x && mouseX <= x+width &&
      mouseY >= y && mouseY <= y+height) {
      return true;
    } else {
      return false;
    }
  }

   public boolean overCircle(int x, int y, int diameter) {
    float disX = x - mouseX;
    float disY = y - mouseY;
    if (sqrt(sq(disX) + sq(disY)) < diameter/2 ) {
      return true;
    } else {
      return false;
    }
  }
}


/**
 * This sketch is a more involved use of AudioSamples to create a simple drum machine.
 * Click on the buttons to toggle them on and off. The buttons that are on will trigger
 * samples when the beat marker passes over their column. You can change the tempo by
 * clicking in the BPM box and dragging the mouse up and down.
 * <p>
 * We achieve the timing by using AudioOutput's playNote method and a cleverly written Instrument.
 * <p>
 * For more information about Minim and additional features,
 * visit http://code.compartmental.net/minim/
 */






public class SoundMachine {

  Minim       minim;
  AudioOutput out;
  AudioInput in;
  AudioRecorder recorder;
  Sampler     kick;
  Sampler     snare;
  Sampler     hat;
  Object vision;
  boolean startRec=false;
  String loadPath=null;
  int col1=color(0, 255, 0), col2=color(255, 0, 0);
  PGraphics pg;
  boolean[] hatRow = new boolean[16];
  boolean[] snrRow = new boolean[16];
  boolean[] kikRow = new boolean[16];

  ArrayList<Rect> buttons = new ArrayList<Rect>();

  int bpm = 120;

  int beat; // which beat we're on

  SoundMachine() {
    setupDrums();
  }


   public void setRecordFlag(boolean flag) {
    startRec=flag;
  }


  SoundMachine(Object v) {
    vision=v;
    setupDrums();
  }

   public void setColor1(int col) {
    col1=col;
  }

   public void setColor2(int col) {
    col2=col;
  }

   public void setHatRow(boolean[] hata) {

    this.hatRow=hata;
  }

   public void setSnrRow(boolean[] snrs) {

    this.snrRow=snrs;
  }

   public void setKikRow(boolean[] kik) {
    this.kikRow=kik;
  }


   public void saveSound(String location) {
    String[] rec=new String[3];
    String values="";
    for (boolean value : hatRow) {
      values+=value+",";
    }
    values=values.substring(0, values.length()-1);
    //values+="/n";
    rec[0]=values;
    values="";
    for (boolean value : snrRow) {
      values+=value+",";
    }
    values=values.substring(0, values.length()-1);
    //values+="/n";
    rec[1]=values;
    values="";
    for (boolean value : kikRow) {
      values+=value+",";
    }
    values=values.substring(0, values.length()-1);
    rec[2]=values;
    values="";
    if (loadPath==null)
      saveStrings(location+"/beat"+frameCount+".svb", rec);
    else
      saveStrings(loadPath, rec);
  }

   public void loadSound(String location) {
    int mm=0;
    loadPath=location;
    String[] values=loadStrings(location);
    String value=values[0];
    String[] ss=value.split(",");
    for (String vv : ss) {
      hatRow[mm]=intb(vv);
      mm++;
    }
    mm=0;
    value=values[1];
    ss=value.split(",");
    for (String vv : ss) {
      snrRow[mm]=intb(vv);
      mm++;
    }
    mm=0;
    value=values[2];
    ss=value.split(",");
    for (String vv : ss) {
      kikRow[mm]=intb(vv);
      mm++;
    }
  }

   public boolean intb(String value) {
    return Boolean.parseBoolean(value);
  }

  // here's an Instrument implementation that we use
  // to trigger Samplers every sixteenth note.
  // Notice how we get away with using only one instance
  // of this class to have endless beat making by
  // having the class schedule itself to be played
  // at the end of its noteOff method.
  class Tick implements Instrument
  {
     public void noteOn( float dur )
    {
      if ( hatRow[beat] ) hat.trigger();
      if ( snrRow[beat] ) snare.trigger();
      if ( kikRow[beat] ) kick.trigger();
    }

     public void noteOff()
    {
      // next beat
      beat = (beat+1)%16;
      // set the new tempo
      out.setTempo( bpm );
      // play this again right now, with a sixteenth note duration
      out.playNote( 0, 0.25f, this );
    }
  }

  // simple class for drawing the gui
  class Rect
  {
    int x, y, w, h;
    boolean[] steps;
    int stepId;

    public Rect(int _x, int _y, boolean[] _steps, int _id)
    {
      x = _x;
      y = _y;
      w = 50;
      h = 60;
      steps = _steps;
      stepId = _id;
    }

    public void drawKey()
    {

      if ( steps[stepId] )
      {
        fill(col1);
      } else
      {
        if (stepOn)
          fill(0, 0, 0);
        else
          fill(col2);
      }

      image(bImage, x, y, w, h);
      ellipse(x, y, w, h);
    }

    public void mspressed()
    {
      if ( mouseX >= x && mouseX <= x+w && mouseY >= y && mouseY <= y+h )
      {
        steps[stepId] = !steps[stepId];
      }
    }
  }

  boolean stepOn=false;
   public void keyDrums() {

    if (key=='1')
    {
      stepOn=true ;
      println("step on");
    }
    if (key=='2')
    {
      stepOn=false;
      println("step off");
    }
  }


   public void setBeat1(String name) {
    beat1=name;
  }

   public void setBeat2(String name) {
    beat2=name;
  }

   public void setBeat3(String name) {
    beat3=name;
  }

  String mixBeat;
   public void setMixBeatPath(String pp) {
    mixBeat=pp;
  }

  PImage bImage;
  String beat1="BD.wav", beat2="SD.wav", beat3="CHH.wav";
  Delay myDelay;
   public void setupDrums()
  {

    bImage=loadImage("button.png");

    minim = new Minim(vision);
    out   = minim.getLineOut(Minim.STEREO);
    in = minim.getLineIn(Minim.STEREO, 1024);
    mixBeat="/Users/frankappiah/Documents/Processing/SoundVision/data/beat/beat"+0+".mp3";
    recorder=minim.createRecorder(in, mixBeat);
    // load all of our samples, using 4 voices for each.
    // this will help ensure we have enough voices to handle even
    // very fast tempos.
    kick  = new Sampler( beat1, 4, minim );
    snare = new Sampler( beat2, 4, minim );
    hat   = new Sampler( beat3, 4, minim );

    // patch samplers to the output
    kick.patch( out );
    snare.patch( out );
    hat.patch( out );


    myDelay = new Delay( 0.4f, 0.5f, true, true );

    // sawh will create a Sawtooth wave with the requested number of harmonics.
    // like with Waves.randomNHarms for sine waves,
    // you can create a richer sounding sawtooth this way.
    Waveform saw = Waves.saw(12);
    // create the Blip that will be used
    Oscil myBlip = new Oscil( 245.0f, 0.3f, saw );

    // Waves.square will create a square wave with an uneven duty-cycle,
    // also known as a pulse wave. a square wave has only two values,
    // either -1 or 1 and the duty cycle indicates how much of the wave
    // should -1 and how much 1. in this case, we are asking for a square
    // wave that is -1 90% of the time, and 1 10% of the time.
    Waveform square = Waves.pulse( 0.4f - random(0, 6)/10);
    // create an LFO to be used for an amplitude envelope
    Oscil myLFO = new Oscil( 1, 0.3f, square );
    // offset the center value of the LFO so that it outputs 0
    // for the long portion of the duty cycle
    myLFO.offset.setLastValue( 0.3f );

    //myLFO.patch( myBlip.amplitude );

    // and the Blip is patched through the delay into the output
    myBlip.patch(myLFO).patch(myDelay).patch(out);

    for (int i = 0; i < 16; i++)
    {
      buttons.add( new Rect(280+i*54, 270, hatRow, i ) );
      buttons.add( new Rect(280+i*54, 330, snrRow, i ) );
      buttons.add( new Rect(280+i*54, 390, kikRow, i ) );
    }

    beat = 0;

    // start the sequencer
    out.setTempo( bpm );
    out.playNote( 0, 0.25f, new Tick() );
  }

   public void drawDrums()
  {
    //pushStyle();
    background(0);
    fill(255);

    noFill();
    // tint(110);
    for (int i = 0; i < buttons.size(); ++i)
    {
      buttons.get(i).drawKey();
    }
    stroke(128);
    if ( beat % 4 == 0 )
    {
      fill(200, 0, 0, 50);
    } else
    {
      fill(0, 200, 0, 50);
    }

    // beat marker
    // fill(0,0,255);
    rect(240+beat*54, 132, 30, 60);
    // popStyle();
    if (frameCount % 120 > 20 )
      stepOn=false;
    else stepOn=true;
    if (isRecordSet()) {
      if (recorder!=null) {
        recorder.beginRecord();
      }
    } else
    {
      if (recorder!=null) {
        if (recorder.isRecording())
          recorder.endRecord();
        JOptionPane.showMessageDialog(null, "Mix sound is saved at :\n"+ mixBeat);
      }
    }
  }

   public boolean isRecordSet() {
    println("Recording....["+startRec+"]");
    return startRec;
  }

   public void drumHit()
  {
    for (int i = 0; i < buttons.size(); ++i)
    {
      buttons.get(i).mspressed();
    }
  }
}


  public void settings() { fullScreen();
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SoundVision" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
